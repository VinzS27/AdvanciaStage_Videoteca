package com.advancia.DAO;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;

import com.advancia.model.DVD;
import com.advancia.model.Director;
import com.advancia.model.Genre;
import com.advancia.model.User;

@Stateless
@LocalBean
public class VideotecaDAO implements VideotecaDAOLocal {

	public VideotecaDAO() {
	}

	@PersistenceContext
	private EntityManager em;

	// --------USER----------
	@Override
	public User checkUser(String username, String password) {
		List<User> listResult = new ArrayList<User>();
		
		TypedQuery<User> query = em.createQuery("SELECT u FROM User u WHERE u.username = :username AND u.password=:password", User.class);
		query.setParameter("username", username);
		query.setParameter("password", password);
		listResult = query.getResultList();
		
		return listResult.isEmpty() ? null : listResult.get(0);
	}

	// ----------DVD----------
	
	@Override
	public List<DVD> getAllDVDs() {
		List<DVD> listResult = new ArrayList<DVD>();
		em.flush();

		TypedQuery<DVD> query = em.createQuery("SELECT d from DVD d", DVD.class);
		listResult = query.getResultList();

		return listResult.isEmpty() ? null : listResult;
	}
	
	@Override
	public DVD getDVDById(int id) {
		em.flush();
		DVD dvd = em.find(DVD.class, id);

		return (dvd != null) ? dvd : null;
	}

	@Override
	public List<DVD> getAvailableDVDs() {
		return em.createQuery("SELECT d FROM DVD d WHERE d.rentalDate IS NULL", DVD.class).getResultList();
	}

	@Override
	public DVD addDVD(String nome, Director director, Genre genre, Date date) {

		TypedQuery<DVD> query = em.createQuery("select d from DVD d where d.nome = :nome "
				+ "and d.date = :date and d.director = :director and d.genre = :genre", DVD.class);
		query.setParameter("name", nome);
		query.setParameter("rental_date", date);
		query.setParameter("director", director);
		List<DVD> filmGiaPresente = query.getResultList();
		if (filmGiaPresente == null || filmGiaPresente.isEmpty()) {
			DVD film = new DVD(nome, date, director);
			em.persist(film);
			return film;
		} else {
			return filmGiaPresente.get(0);
		}
		
	}
	
	@Override
	public void deleteDVD(Long id) {
		em.flush();
		DVD dvd = em.find(DVD.class, id);
		if (dvd != null) {
			em.remove(dvd);
			em.flush();
		}
	}
	
	@Override
	public void rentDVD(Long dvdId, Long userId) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public List<DVD> getUserRentals(Long userId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<DVD> getAllRentals() {
		// TODO Auto-generated method stub
		return null;
	}

	
	// ----------DIRECTOR----------
	@Override
	public List<Director> getDirector() {
		List<Director> listResult = new ArrayList<Director>();
		em.flush();

		TypedQuery<Director> query = em.createQuery("SELECT d from Director d", Director.class);
		listResult = query.getResultList();

		return listResult.isEmpty() ? null : listResult;
	}
	
	@Override
	public Director getDirectorById(int idDirector) {
		em.flush();
		Director director = em.find(Director.class, idDirector);

		return (director != null) ? director : null;
	}

	// ----------GENRE----------
	
	@Override
	public List<Genre> getGenre() {
		List<Genre> listResult = new ArrayList<Genre>();
		em.flush();
		
		TypedQuery<Genre> query = em.createQuery("SELECT g from Genre g", Genre.class);
		listResult = query.getResultList();
		
		return listResult.isEmpty() ? null : listResult;
	}

	@Override
	public Genre getGenreById(int idGenre) {
		em.flush();
		Genre genre = em.find(Genre.class, idGenre);
	
		return (genre != null) ? genre : null;
	}

}
